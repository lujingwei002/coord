#include "coord/base/base_promise.h"
#include "coord/coord.h"
#include "coord/component/script_component.h"
#include "coord/coordx.h"

namespace coord {

RC_IMPLEMENT(base_promise, "coord::base_promise")

base_promise::base_promise(Coord* coord) {
    this->coord = coord;
    this->resolveFunc = NULL;
    this->rejectFunc = NULL;
    this->reqTime = uv_hrtime();
    this->resolveRef = 0;
    this->rejectRef = 0;
    this->requestUsing = nullptr;
}

base_promise::~base_promise() {
   this->coord->CoreLogDebug("[coord::base_promise] ~");
   if(this->resolveRef) {
        luaL_unref(this->coord->Script->L, LUA_REGISTRYINDEX, this->resolveRef);
    }
    if(this->rejectRef) {
        luaL_unref(this->coord->Script->L, LUA_REGISTRYINDEX, this->rejectRef);
    }
    if(this->requestUsing) {
        this->coord->Destory(this->requestUsing);
        this->requestUsing = nullptr;
    }
}

IPromise* base_promise::Using(IRequest* request) {
    base_request* br = dynamic_cast<base_request*>(request);
    if (nullptr == br) {
        return this;
    }
    if(this->requestUsing) {
        this->coord->Destory(this->requestUsing);
        this->requestUsing = nullptr;
    }
    this->requestUsing = br;
    if(this->requestUsing) {
        this->coord->DontDestory(this->requestUsing);
    }
    return this;
}

IPromise* base_promise::Then(ScriptComponent* object, int ref){
    if(this->resolveRef) {
        luaL_unref(this->coord->Script->L, LUA_REGISTRYINDEX, this->resolveRef);
        this->resolveRef = 0;
    }
    this->resolveRef = ref;
//    this->resolveFunc = std::bind(&ScriptComponent::recvClusterResult, object, std::placeholders::_1, "recvClusterResult", ref);
    return this;    
} 

IPromise* base_promise::Else(ScriptComponent* object, int ref){
    if(this->rejectRef) {
        luaL_unref(this->coord->Script->L, LUA_REGISTRYINDEX, this->rejectRef);
        this->rejectRef = 0;
    }
    this->rejectRef = ref;
 //   this->rejectFunc = std::bind(&ScriptComponent::recvClusterResult, object, std::placeholders::_1, "recvClusterResult", ref);
    return this;
}

IPromise* base_promise::Then(IPromiseResolveFunc func){
    this->resolveFunc = func;
    return this;    
} 

IPromise* base_promise::Else(IPromiseRejectFunc func){
    this->rejectFunc = func;
    return this;    
} 

void base_promise::resolve(base_result* result) {
    this->coord->CoreLogDebug("[coord::base_promise] resolve");
    if(this->resolveFunc == NULL) {
        return;
    }
    try{
        //传递到逻辑层
        this->resolveFunc((IResult*)result, this->requestUsing);
    } catch(ScriptException& e){
    }
}

void base_promise::reject(base_result* result){
    this->coord->CoreLogDebug("[coord::base_promise] reject");
    if(this->rejectFunc == NULL) {
        return;
        
    }
    try{
        //传递到逻辑层
        this->rejectFunc((IResult*)result, this->requestUsing);
    } catch(ScriptException& e){
    }
}

int base_promise::Then(lua_State* L) {
#ifndef TOLUA_RELEASE
    tolua_Error tolua_err;
    if (
        !tolua_isusertype(L, 1, this->TypeName(), 0, &tolua_err) ||
        !tolua_isusertype(L, 2, "coord::ScriptComponent",0, &tolua_err) ||
        !tolua_isfunction(L, 3, 0,&tolua_err) ||
        !tolua_isnoobj(L, 4, &tolua_err)
    )
        goto tolua_lerror;
    else 
#endif
    {
        coord::ScriptComponent* object = ((coord::ScriptComponent*)  tolua_tousertype(L,2,0));
        lua_pushvalue(L, 3);
        int ref =  luaL_ref(L, LUA_REGISTRYINDEX);
        if (ref < 0) {
            tolua_error(L, "error in function 'Then'.\nattempt to set a nil function", NULL);
            return 0;
        }
        base_promise* tolua_ret = (base_promise*)  this->Then(object,ref);
        tolua_pushusertype(L, (void*)tolua_ret, this->TypeName());
    }
    return 1;
#ifndef TOLUA_RELEASE
    tolua_lerror:
    tolua_error(L,"#ferror in function 'Then'.",&tolua_err);
    return 0;
#endif
}

int base_promise::Else(lua_State* L) {
#ifndef TOLUA_RELEASE
    tolua_Error tolua_err;
    if (
        !tolua_isusertype(L, 1, this->TypeName(), 0, &tolua_err) ||
        !tolua_isusertype(L, 2, "coord::ScriptComponent", 0, &tolua_err) ||
        !tolua_isfunction(L, 3, 0, &tolua_err) ||
        !tolua_isnoobj(L, 4, &tolua_err)
    )
        goto tolua_lerror;
    else 
#endif
    {
        coord::ScriptComponent* object = ((coord::ScriptComponent*)  tolua_tousertype(L,2,0));
        lua_pushvalue(L, 3);
        int ref =  luaL_ref(L, LUA_REGISTRYINDEX);
        if (ref < 0) {
            tolua_error(L, "error in function 'Else'.\nattempt to set a nil function", NULL);
            return 0;
        }
        base_promise* tolua_ret = (base_promise*)  this->Else(object,ref);
        tolua_pushusertype(L,(void*)tolua_ret, this->TypeName()); 
    }
    return 1;
#ifndef TOLUA_RELEASE
    tolua_lerror:
    tolua_error(L,"#ferror in function 'Else'.",&tolua_err);
    return 0;
#endif
}

} 
