// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/coord.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fcoord_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fcoord_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fcoord_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fcoord_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fcoord_2eproto;
namespace coord {
class cluster_handshake_ack;
struct cluster_handshake_ackDefaultTypeInternal;
extern cluster_handshake_ackDefaultTypeInternal _cluster_handshake_ack_default_instance_;
class cluster_handshake_request;
struct cluster_handshake_requestDefaultTypeInternal;
extern cluster_handshake_requestDefaultTypeInternal _cluster_handshake_request_default_instance_;
class cluster_handshake_response;
struct cluster_handshake_responseDefaultTypeInternal;
extern cluster_handshake_responseDefaultTypeInternal _cluster_handshake_response_default_instance_;
class gate_cluster_instead_request;
struct gate_cluster_instead_requestDefaultTypeInternal;
extern gate_cluster_instead_requestDefaultTypeInternal _gate_cluster_instead_request_default_instance_;
class gate_cluster_instead_response;
struct gate_cluster_instead_responseDefaultTypeInternal;
extern gate_cluster_instead_responseDefaultTypeInternal _gate_cluster_instead_response_default_instance_;
class gate_test_request;
struct gate_test_requestDefaultTypeInternal;
extern gate_test_requestDefaultTypeInternal _gate_test_request_default_instance_;
class gate_test_response;
struct gate_test_responseDefaultTypeInternal;
extern gate_test_responseDefaultTypeInternal _gate_test_response_default_instance_;
}  // namespace coord
PROTOBUF_NAMESPACE_OPEN
template<> ::coord::cluster_handshake_ack* Arena::CreateMaybeMessage<::coord::cluster_handshake_ack>(Arena*);
template<> ::coord::cluster_handshake_request* Arena::CreateMaybeMessage<::coord::cluster_handshake_request>(Arena*);
template<> ::coord::cluster_handshake_response* Arena::CreateMaybeMessage<::coord::cluster_handshake_response>(Arena*);
template<> ::coord::gate_cluster_instead_request* Arena::CreateMaybeMessage<::coord::gate_cluster_instead_request>(Arena*);
template<> ::coord::gate_cluster_instead_response* Arena::CreateMaybeMessage<::coord::gate_cluster_instead_response>(Arena*);
template<> ::coord::gate_test_request* Arena::CreateMaybeMessage<::coord::gate_test_request>(Arena*);
template<> ::coord::gate_test_response* Arena::CreateMaybeMessage<::coord::gate_test_response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace coord {

// ===================================================================

class cluster_handshake_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coord.cluster_handshake_request) */ {
 public:
  inline cluster_handshake_request() : cluster_handshake_request(nullptr) {}
  ~cluster_handshake_request() override;
  explicit constexpr cluster_handshake_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  cluster_handshake_request(const cluster_handshake_request& from);
  cluster_handshake_request(cluster_handshake_request&& from) noexcept
    : cluster_handshake_request() {
    *this = ::std::move(from);
  }

  inline cluster_handshake_request& operator=(const cluster_handshake_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline cluster_handshake_request& operator=(cluster_handshake_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const cluster_handshake_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const cluster_handshake_request* internal_default_instance() {
    return reinterpret_cast<const cluster_handshake_request*>(
               &_cluster_handshake_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(cluster_handshake_request& a, cluster_handshake_request& b) {
    a.Swap(&b);
  }
  inline void Swap(cluster_handshake_request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cluster_handshake_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline cluster_handshake_request* New() const final {
    return new cluster_handshake_request();
  }

  cluster_handshake_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<cluster_handshake_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const cluster_handshake_request& from);
  void MergeFrom(const cluster_handshake_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cluster_handshake_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coord.cluster_handshake_request";
  }
  protected:
  explicit cluster_handshake_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeNameFieldNumber = 1,
    kHostFieldNumber = 2,
    kVersionFieldNumber = 4,
    kPortFieldNumber = 3,
  };
  // string NodeName = 1;
  void clear_nodename();
  const std::string& nodename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nodename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nodename();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_nodename();
  void set_allocated_nodename(std::string* nodename);
  private:
  const std::string& _internal_nodename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodename(const std::string& value);
  std::string* _internal_mutable_nodename();
  public:

  // string Host = 2;
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // int64 Version = 4;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 Port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:coord.cluster_handshake_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcoord_2eproto;
};
// -------------------------------------------------------------------

class cluster_handshake_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coord.cluster_handshake_response) */ {
 public:
  inline cluster_handshake_response() : cluster_handshake_response(nullptr) {}
  ~cluster_handshake_response() override;
  explicit constexpr cluster_handshake_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  cluster_handshake_response(const cluster_handshake_response& from);
  cluster_handshake_response(cluster_handshake_response&& from) noexcept
    : cluster_handshake_response() {
    *this = ::std::move(from);
  }

  inline cluster_handshake_response& operator=(const cluster_handshake_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline cluster_handshake_response& operator=(cluster_handshake_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const cluster_handshake_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const cluster_handshake_response* internal_default_instance() {
    return reinterpret_cast<const cluster_handshake_response*>(
               &_cluster_handshake_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(cluster_handshake_response& a, cluster_handshake_response& b) {
    a.Swap(&b);
  }
  inline void Swap(cluster_handshake_response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cluster_handshake_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline cluster_handshake_response* New() const final {
    return new cluster_handshake_response();
  }

  cluster_handshake_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<cluster_handshake_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const cluster_handshake_response& from);
  void MergeFrom(const cluster_handshake_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cluster_handshake_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coord.cluster_handshake_response";
  }
  protected:
  explicit cluster_handshake_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // int32 Code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:coord.cluster_handshake_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcoord_2eproto;
};
// -------------------------------------------------------------------

class cluster_handshake_ack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coord.cluster_handshake_ack) */ {
 public:
  inline cluster_handshake_ack() : cluster_handshake_ack(nullptr) {}
  ~cluster_handshake_ack() override;
  explicit constexpr cluster_handshake_ack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  cluster_handshake_ack(const cluster_handshake_ack& from);
  cluster_handshake_ack(cluster_handshake_ack&& from) noexcept
    : cluster_handshake_ack() {
    *this = ::std::move(from);
  }

  inline cluster_handshake_ack& operator=(const cluster_handshake_ack& from) {
    CopyFrom(from);
    return *this;
  }
  inline cluster_handshake_ack& operator=(cluster_handshake_ack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const cluster_handshake_ack& default_instance() {
    return *internal_default_instance();
  }
  static inline const cluster_handshake_ack* internal_default_instance() {
    return reinterpret_cast<const cluster_handshake_ack*>(
               &_cluster_handshake_ack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(cluster_handshake_ack& a, cluster_handshake_ack& b) {
    a.Swap(&b);
  }
  inline void Swap(cluster_handshake_ack* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cluster_handshake_ack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline cluster_handshake_ack* New() const final {
    return new cluster_handshake_ack();
  }

  cluster_handshake_ack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<cluster_handshake_ack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const cluster_handshake_ack& from);
  void MergeFrom(const cluster_handshake_ack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cluster_handshake_ack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coord.cluster_handshake_ack";
  }
  protected:
  explicit cluster_handshake_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:coord.cluster_handshake_ack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcoord_2eproto;
};
// -------------------------------------------------------------------

class gate_cluster_instead_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coord.gate_cluster_instead_request) */ {
 public:
  inline gate_cluster_instead_request() : gate_cluster_instead_request(nullptr) {}
  ~gate_cluster_instead_request() override;
  explicit constexpr gate_cluster_instead_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  gate_cluster_instead_request(const gate_cluster_instead_request& from);
  gate_cluster_instead_request(gate_cluster_instead_request&& from) noexcept
    : gate_cluster_instead_request() {
    *this = ::std::move(from);
  }

  inline gate_cluster_instead_request& operator=(const gate_cluster_instead_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline gate_cluster_instead_request& operator=(gate_cluster_instead_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const gate_cluster_instead_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const gate_cluster_instead_request* internal_default_instance() {
    return reinterpret_cast<const gate_cluster_instead_request*>(
               &_gate_cluster_instead_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(gate_cluster_instead_request& a, gate_cluster_instead_request& b) {
    a.Swap(&b);
  }
  inline void Swap(gate_cluster_instead_request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(gate_cluster_instead_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline gate_cluster_instead_request* New() const final {
    return new gate_cluster_instead_request();
  }

  gate_cluster_instead_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<gate_cluster_instead_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const gate_cluster_instead_request& from);
  void MergeFrom(const gate_cluster_instead_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gate_cluster_instead_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coord.gate_cluster_instead_request";
  }
  protected:
  explicit gate_cluster_instead_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // uint64 userId = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:coord.gate_cluster_instead_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcoord_2eproto;
};
// -------------------------------------------------------------------

class gate_cluster_instead_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coord.gate_cluster_instead_response) */ {
 public:
  inline gate_cluster_instead_response() : gate_cluster_instead_response(nullptr) {}
  ~gate_cluster_instead_response() override;
  explicit constexpr gate_cluster_instead_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  gate_cluster_instead_response(const gate_cluster_instead_response& from);
  gate_cluster_instead_response(gate_cluster_instead_response&& from) noexcept
    : gate_cluster_instead_response() {
    *this = ::std::move(from);
  }

  inline gate_cluster_instead_response& operator=(const gate_cluster_instead_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline gate_cluster_instead_response& operator=(gate_cluster_instead_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const gate_cluster_instead_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const gate_cluster_instead_response* internal_default_instance() {
    return reinterpret_cast<const gate_cluster_instead_response*>(
               &_gate_cluster_instead_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(gate_cluster_instead_response& a, gate_cluster_instead_response& b) {
    a.Swap(&b);
  }
  inline void Swap(gate_cluster_instead_response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(gate_cluster_instead_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline gate_cluster_instead_response* New() const final {
    return new gate_cluster_instead_response();
  }

  gate_cluster_instead_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<gate_cluster_instead_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const gate_cluster_instead_response& from);
  void MergeFrom(const gate_cluster_instead_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gate_cluster_instead_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coord.gate_cluster_instead_response";
  }
  protected:
  explicit gate_cluster_instead_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // uint64 userId = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::uint64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:coord.gate_cluster_instead_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcoord_2eproto;
};
// -------------------------------------------------------------------

class gate_test_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coord.gate_test_request) */ {
 public:
  inline gate_test_request() : gate_test_request(nullptr) {}
  ~gate_test_request() override;
  explicit constexpr gate_test_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  gate_test_request(const gate_test_request& from);
  gate_test_request(gate_test_request&& from) noexcept
    : gate_test_request() {
    *this = ::std::move(from);
  }

  inline gate_test_request& operator=(const gate_test_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline gate_test_request& operator=(gate_test_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const gate_test_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const gate_test_request* internal_default_instance() {
    return reinterpret_cast<const gate_test_request*>(
               &_gate_test_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(gate_test_request& a, gate_test_request& b) {
    a.Swap(&b);
  }
  inline void Swap(gate_test_request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(gate_test_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline gate_test_request* New() const final {
    return new gate_test_request();
  }

  gate_test_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<gate_test_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const gate_test_request& from);
  void MergeFrom(const gate_test_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gate_test_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coord.gate_test_request";
  }
  protected:
  explicit gate_test_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:coord.gate_test_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcoord_2eproto;
};
// -------------------------------------------------------------------

class gate_test_response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coord.gate_test_response) */ {
 public:
  inline gate_test_response() : gate_test_response(nullptr) {}
  ~gate_test_response() override;
  explicit constexpr gate_test_response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  gate_test_response(const gate_test_response& from);
  gate_test_response(gate_test_response&& from) noexcept
    : gate_test_response() {
    *this = ::std::move(from);
  }

  inline gate_test_response& operator=(const gate_test_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline gate_test_response& operator=(gate_test_response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const gate_test_response& default_instance() {
    return *internal_default_instance();
  }
  static inline const gate_test_response* internal_default_instance() {
    return reinterpret_cast<const gate_test_response*>(
               &_gate_test_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(gate_test_response& a, gate_test_response& b) {
    a.Swap(&b);
  }
  inline void Swap(gate_test_response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(gate_test_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline gate_test_response* New() const final {
    return new gate_test_response();
  }

  gate_test_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<gate_test_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const gate_test_response& from);
  void MergeFrom(const gate_test_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(gate_test_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coord.gate_test_response";
  }
  protected:
  explicit gate_test_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:coord.gate_test_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcoord_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// cluster_handshake_request

// string NodeName = 1;
inline void cluster_handshake_request::clear_nodename() {
  nodename_.ClearToEmpty();
}
inline const std::string& cluster_handshake_request::nodename() const {
  // @@protoc_insertion_point(field_get:coord.cluster_handshake_request.NodeName)
  return _internal_nodename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void cluster_handshake_request::set_nodename(ArgT0&& arg0, ArgT... args) {
 
 nodename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:coord.cluster_handshake_request.NodeName)
}
inline std::string* cluster_handshake_request::mutable_nodename() {
  // @@protoc_insertion_point(field_mutable:coord.cluster_handshake_request.NodeName)
  return _internal_mutable_nodename();
}
inline const std::string& cluster_handshake_request::_internal_nodename() const {
  return nodename_.Get();
}
inline void cluster_handshake_request::_internal_set_nodename(const std::string& value) {
  
  nodename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* cluster_handshake_request::_internal_mutable_nodename() {
  
  return nodename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* cluster_handshake_request::release_nodename() {
  // @@protoc_insertion_point(field_release:coord.cluster_handshake_request.NodeName)
  return nodename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void cluster_handshake_request::set_allocated_nodename(std::string* nodename) {
  if (nodename != nullptr) {
    
  } else {
    
  }
  nodename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:coord.cluster_handshake_request.NodeName)
}

// string Host = 2;
inline void cluster_handshake_request::clear_host() {
  host_.ClearToEmpty();
}
inline const std::string& cluster_handshake_request::host() const {
  // @@protoc_insertion_point(field_get:coord.cluster_handshake_request.Host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void cluster_handshake_request::set_host(ArgT0&& arg0, ArgT... args) {
 
 host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:coord.cluster_handshake_request.Host)
}
inline std::string* cluster_handshake_request::mutable_host() {
  // @@protoc_insertion_point(field_mutable:coord.cluster_handshake_request.Host)
  return _internal_mutable_host();
}
inline const std::string& cluster_handshake_request::_internal_host() const {
  return host_.Get();
}
inline void cluster_handshake_request::_internal_set_host(const std::string& value) {
  
  host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* cluster_handshake_request::_internal_mutable_host() {
  
  return host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* cluster_handshake_request::release_host() {
  // @@protoc_insertion_point(field_release:coord.cluster_handshake_request.Host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void cluster_handshake_request::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:coord.cluster_handshake_request.Host)
}

// int32 Port = 3;
inline void cluster_handshake_request::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 cluster_handshake_request::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 cluster_handshake_request::port() const {
  // @@protoc_insertion_point(field_get:coord.cluster_handshake_request.Port)
  return _internal_port();
}
inline void cluster_handshake_request::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void cluster_handshake_request::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:coord.cluster_handshake_request.Port)
}

// int64 Version = 4;
inline void cluster_handshake_request::clear_version() {
  version_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 cluster_handshake_request::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 cluster_handshake_request::version() const {
  // @@protoc_insertion_point(field_get:coord.cluster_handshake_request.Version)
  return _internal_version();
}
inline void cluster_handshake_request::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  version_ = value;
}
inline void cluster_handshake_request::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:coord.cluster_handshake_request.Version)
}

// -------------------------------------------------------------------

// cluster_handshake_response

// int32 Code = 1;
inline void cluster_handshake_response::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 cluster_handshake_response::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 cluster_handshake_response::code() const {
  // @@protoc_insertion_point(field_get:coord.cluster_handshake_response.Code)
  return _internal_code();
}
inline void cluster_handshake_response::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void cluster_handshake_response::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:coord.cluster_handshake_response.Code)
}

// -------------------------------------------------------------------

// cluster_handshake_ack

// -------------------------------------------------------------------

// gate_cluster_instead_request

// uint64 userId = 1;
inline void gate_cluster_instead_request::clear_userid() {
  userid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 gate_cluster_instead_request::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 gate_cluster_instead_request::userid() const {
  // @@protoc_insertion_point(field_get:coord.gate_cluster_instead_request.userId)
  return _internal_userid();
}
inline void gate_cluster_instead_request::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userid_ = value;
}
inline void gate_cluster_instead_request::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:coord.gate_cluster_instead_request.userId)
}

// -------------------------------------------------------------------

// gate_cluster_instead_response

// uint64 userId = 1;
inline void gate_cluster_instead_response::clear_userid() {
  userid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 gate_cluster_instead_response::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 gate_cluster_instead_response::userid() const {
  // @@protoc_insertion_point(field_get:coord.gate_cluster_instead_response.userId)
  return _internal_userid();
}
inline void gate_cluster_instead_response::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  userid_ = value;
}
inline void gate_cluster_instead_response::set_userid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:coord.gate_cluster_instead_response.userId)
}

// -------------------------------------------------------------------

// gate_test_request

// -------------------------------------------------------------------

// gate_test_response

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace coord

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fcoord_2eproto
