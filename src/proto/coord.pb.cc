// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/coord.proto

#include "proto/coord.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace coord {
constexpr cluster_handshake_request::cluster_handshake_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(int64_t{0})
  , port_(0){}
struct cluster_handshake_requestDefaultTypeInternal {
  constexpr cluster_handshake_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~cluster_handshake_requestDefaultTypeInternal() {}
  union {
    cluster_handshake_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT cluster_handshake_requestDefaultTypeInternal _cluster_handshake_request_default_instance_;
constexpr cluster_handshake_response::cluster_handshake_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(0){}
struct cluster_handshake_responseDefaultTypeInternal {
  constexpr cluster_handshake_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~cluster_handshake_responseDefaultTypeInternal() {}
  union {
    cluster_handshake_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT cluster_handshake_responseDefaultTypeInternal _cluster_handshake_response_default_instance_;
constexpr cluster_handshake_ack::cluster_handshake_ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct cluster_handshake_ackDefaultTypeInternal {
  constexpr cluster_handshake_ackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~cluster_handshake_ackDefaultTypeInternal() {}
  union {
    cluster_handshake_ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT cluster_handshake_ackDefaultTypeInternal _cluster_handshake_ack_default_instance_;
constexpr gate_cluster_instead_request::gate_cluster_instead_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : userid_(uint64_t{0u}){}
struct gate_cluster_instead_requestDefaultTypeInternal {
  constexpr gate_cluster_instead_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~gate_cluster_instead_requestDefaultTypeInternal() {}
  union {
    gate_cluster_instead_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT gate_cluster_instead_requestDefaultTypeInternal _gate_cluster_instead_request_default_instance_;
constexpr gate_cluster_instead_response::gate_cluster_instead_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : userid_(uint64_t{0u}){}
struct gate_cluster_instead_responseDefaultTypeInternal {
  constexpr gate_cluster_instead_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~gate_cluster_instead_responseDefaultTypeInternal() {}
  union {
    gate_cluster_instead_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT gate_cluster_instead_responseDefaultTypeInternal _gate_cluster_instead_response_default_instance_;
constexpr gate_test_request::gate_test_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct gate_test_requestDefaultTypeInternal {
  constexpr gate_test_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~gate_test_requestDefaultTypeInternal() {}
  union {
    gate_test_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT gate_test_requestDefaultTypeInternal _gate_test_request_default_instance_;
constexpr gate_test_response::gate_test_response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct gate_test_responseDefaultTypeInternal {
  constexpr gate_test_responseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~gate_test_responseDefaultTypeInternal() {}
  union {
    gate_test_response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT gate_test_responseDefaultTypeInternal _gate_test_response_default_instance_;
}  // namespace coord
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fcoord_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fcoord_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fcoord_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fcoord_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coord::cluster_handshake_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coord::cluster_handshake_request, nodename_),
  PROTOBUF_FIELD_OFFSET(::coord::cluster_handshake_request, host_),
  PROTOBUF_FIELD_OFFSET(::coord::cluster_handshake_request, port_),
  PROTOBUF_FIELD_OFFSET(::coord::cluster_handshake_request, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coord::cluster_handshake_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coord::cluster_handshake_response, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coord::cluster_handshake_ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coord::gate_cluster_instead_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coord::gate_cluster_instead_request, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coord::gate_cluster_instead_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coord::gate_cluster_instead_response, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coord::gate_test_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coord::gate_test_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::coord::cluster_handshake_request)},
  { 9, -1, sizeof(::coord::cluster_handshake_response)},
  { 15, -1, sizeof(::coord::cluster_handshake_ack)},
  { 20, -1, sizeof(::coord::gate_cluster_instead_request)},
  { 26, -1, sizeof(::coord::gate_cluster_instead_response)},
  { 32, -1, sizeof(::coord::gate_test_request)},
  { 37, -1, sizeof(::coord::gate_test_response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coord::_cluster_handshake_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coord::_cluster_handshake_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coord::_cluster_handshake_ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coord::_gate_cluster_instead_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coord::_gate_cluster_instead_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coord::_gate_test_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coord::_gate_test_response_default_instance_),
};

const char descriptor_table_protodef_proto_2fcoord_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021proto/coord.proto\022\005coord\"Z\n\031cluster_ha"
  "ndshake_request\022\020\n\010NodeName\030\001 \001(\t\022\014\n\004Hos"
  "t\030\002 \001(\t\022\014\n\004Port\030\003 \001(\005\022\017\n\007Version\030\004 \001(\003\"*"
  "\n\032cluster_handshake_response\022\014\n\004Code\030\001 \001"
  "(\005\"\027\n\025cluster_handshake_ack\".\n\034gate_clus"
  "ter_instead_request\022\016\n\006userId\030\001 \001(\004\"/\n\035g"
  "ate_cluster_instead_response\022\016\n\006userId\030\001"
  " \001(\004\"\023\n\021gate_test_request\"\024\n\022gate_test_r"
  "esponseB\nZ\010./;coordb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fcoord_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fcoord_2eproto = {
  false, false, 347, descriptor_table_protodef_proto_2fcoord_2eproto, "proto/coord.proto", 
  &descriptor_table_proto_2fcoord_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_proto_2fcoord_2eproto::offsets,
  file_level_metadata_proto_2fcoord_2eproto, file_level_enum_descriptors_proto_2fcoord_2eproto, file_level_service_descriptors_proto_2fcoord_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2fcoord_2eproto_getter() {
  return &descriptor_table_proto_2fcoord_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fcoord_2eproto(&descriptor_table_proto_2fcoord_2eproto);
namespace coord {

// ===================================================================

class cluster_handshake_request::_Internal {
 public:
};

cluster_handshake_request::cluster_handshake_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:coord.cluster_handshake_request)
}
cluster_handshake_request::cluster_handshake_request(const cluster_handshake_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodename().empty()) {
    nodename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nodename(), 
      GetArenaForAllocation());
  }
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host(), 
      GetArenaForAllocation());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&version_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:coord.cluster_handshake_request)
}

void cluster_handshake_request::SharedCtor() {
nodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&version_)) + sizeof(port_));
}

cluster_handshake_request::~cluster_handshake_request() {
  // @@protoc_insertion_point(destructor:coord.cluster_handshake_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void cluster_handshake_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nodename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void cluster_handshake_request::ArenaDtor(void* object) {
  cluster_handshake_request* _this = reinterpret_cast< cluster_handshake_request* >(object);
  (void)_this;
}
void cluster_handshake_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void cluster_handshake_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void cluster_handshake_request::Clear() {
// @@protoc_insertion_point(message_clear_start:coord.cluster_handshake_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodename_.ClearToEmpty();
  host_.ClearToEmpty();
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&version_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cluster_handshake_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string NodeName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nodename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "coord.cluster_handshake_request.NodeName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "coord.cluster_handshake_request.Host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* cluster_handshake_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coord.cluster_handshake_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string NodeName = 1;
  if (!this->nodename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodename().data(), static_cast<int>(this->_internal_nodename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "coord.cluster_handshake_request.NodeName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nodename(), target);
  }

  // string Host = 2;
  if (!this->host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "coord.cluster_handshake_request.Host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host(), target);
  }

  // int32 Port = 3;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  // int64 Version = 4;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coord.cluster_handshake_request)
  return target;
}

size_t cluster_handshake_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coord.cluster_handshake_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string NodeName = 1;
  if (!this->nodename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodename());
  }

  // string Host = 2;
  if (!this->host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // int64 Version = 4;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_version());
  }

  // int32 Port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cluster_handshake_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coord.cluster_handshake_request)
  GOOGLE_DCHECK_NE(&from, this);
  const cluster_handshake_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cluster_handshake_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coord.cluster_handshake_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coord.cluster_handshake_request)
    MergeFrom(*source);
  }
}

void cluster_handshake_request::MergeFrom(const cluster_handshake_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coord.cluster_handshake_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.nodename().empty()) {
    _internal_set_nodename(from._internal_nodename());
  }
  if (!from.host().empty()) {
    _internal_set_host(from._internal_host());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void cluster_handshake_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coord.cluster_handshake_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cluster_handshake_request::CopyFrom(const cluster_handshake_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coord.cluster_handshake_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cluster_handshake_request::IsInitialized() const {
  return true;
}

void cluster_handshake_request::InternalSwap(cluster_handshake_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nodename_, GetArenaForAllocation(),
      &other->nodename_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &host_, GetArenaForAllocation(),
      &other->host_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(cluster_handshake_request, port_)
      + sizeof(cluster_handshake_request::port_)
      - PROTOBUF_FIELD_OFFSET(cluster_handshake_request, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata cluster_handshake_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fcoord_2eproto_getter, &descriptor_table_proto_2fcoord_2eproto_once,
      file_level_metadata_proto_2fcoord_2eproto[0]);
}

// ===================================================================

class cluster_handshake_response::_Internal {
 public:
};

cluster_handshake_response::cluster_handshake_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:coord.cluster_handshake_response)
}
cluster_handshake_response::cluster_handshake_response(const cluster_handshake_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:coord.cluster_handshake_response)
}

void cluster_handshake_response::SharedCtor() {
code_ = 0;
}

cluster_handshake_response::~cluster_handshake_response() {
  // @@protoc_insertion_point(destructor:coord.cluster_handshake_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void cluster_handshake_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void cluster_handshake_response::ArenaDtor(void* object) {
  cluster_handshake_response* _this = reinterpret_cast< cluster_handshake_response* >(object);
  (void)_this;
}
void cluster_handshake_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void cluster_handshake_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void cluster_handshake_response::Clear() {
// @@protoc_insertion_point(message_clear_start:coord.cluster_handshake_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cluster_handshake_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* cluster_handshake_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coord.cluster_handshake_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coord.cluster_handshake_response)
  return target;
}

size_t cluster_handshake_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coord.cluster_handshake_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cluster_handshake_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coord.cluster_handshake_response)
  GOOGLE_DCHECK_NE(&from, this);
  const cluster_handshake_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cluster_handshake_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coord.cluster_handshake_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coord.cluster_handshake_response)
    MergeFrom(*source);
  }
}

void cluster_handshake_response::MergeFrom(const cluster_handshake_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coord.cluster_handshake_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void cluster_handshake_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coord.cluster_handshake_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cluster_handshake_response::CopyFrom(const cluster_handshake_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coord.cluster_handshake_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cluster_handshake_response::IsInitialized() const {
  return true;
}

void cluster_handshake_response::InternalSwap(cluster_handshake_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata cluster_handshake_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fcoord_2eproto_getter, &descriptor_table_proto_2fcoord_2eproto_once,
      file_level_metadata_proto_2fcoord_2eproto[1]);
}

// ===================================================================

class cluster_handshake_ack::_Internal {
 public:
};

cluster_handshake_ack::cluster_handshake_ack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:coord.cluster_handshake_ack)
}
cluster_handshake_ack::cluster_handshake_ack(const cluster_handshake_ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:coord.cluster_handshake_ack)
}

void cluster_handshake_ack::SharedCtor() {
}

cluster_handshake_ack::~cluster_handshake_ack() {
  // @@protoc_insertion_point(destructor:coord.cluster_handshake_ack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void cluster_handshake_ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void cluster_handshake_ack::ArenaDtor(void* object) {
  cluster_handshake_ack* _this = reinterpret_cast< cluster_handshake_ack* >(object);
  (void)_this;
}
void cluster_handshake_ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void cluster_handshake_ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void cluster_handshake_ack::Clear() {
// @@protoc_insertion_point(message_clear_start:coord.cluster_handshake_ack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cluster_handshake_ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* cluster_handshake_ack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coord.cluster_handshake_ack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coord.cluster_handshake_ack)
  return target;
}

size_t cluster_handshake_ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coord.cluster_handshake_ack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cluster_handshake_ack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coord.cluster_handshake_ack)
  GOOGLE_DCHECK_NE(&from, this);
  const cluster_handshake_ack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cluster_handshake_ack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coord.cluster_handshake_ack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coord.cluster_handshake_ack)
    MergeFrom(*source);
  }
}

void cluster_handshake_ack::MergeFrom(const cluster_handshake_ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coord.cluster_handshake_ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void cluster_handshake_ack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coord.cluster_handshake_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cluster_handshake_ack::CopyFrom(const cluster_handshake_ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coord.cluster_handshake_ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cluster_handshake_ack::IsInitialized() const {
  return true;
}

void cluster_handshake_ack::InternalSwap(cluster_handshake_ack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata cluster_handshake_ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fcoord_2eproto_getter, &descriptor_table_proto_2fcoord_2eproto_once,
      file_level_metadata_proto_2fcoord_2eproto[2]);
}

// ===================================================================

class gate_cluster_instead_request::_Internal {
 public:
};

gate_cluster_instead_request::gate_cluster_instead_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:coord.gate_cluster_instead_request)
}
gate_cluster_instead_request::gate_cluster_instead_request(const gate_cluster_instead_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:coord.gate_cluster_instead_request)
}

void gate_cluster_instead_request::SharedCtor() {
userid_ = uint64_t{0u};
}

gate_cluster_instead_request::~gate_cluster_instead_request() {
  // @@protoc_insertion_point(destructor:coord.gate_cluster_instead_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void gate_cluster_instead_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void gate_cluster_instead_request::ArenaDtor(void* object) {
  gate_cluster_instead_request* _this = reinterpret_cast< gate_cluster_instead_request* >(object);
  (void)_this;
}
void gate_cluster_instead_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void gate_cluster_instead_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void gate_cluster_instead_request::Clear() {
// @@protoc_insertion_point(message_clear_start:coord.gate_cluster_instead_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* gate_cluster_instead_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* gate_cluster_instead_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coord.gate_cluster_instead_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 userId = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coord.gate_cluster_instead_request)
  return target;
}

size_t gate_cluster_instead_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coord.gate_cluster_instead_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gate_cluster_instead_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coord.gate_cluster_instead_request)
  GOOGLE_DCHECK_NE(&from, this);
  const gate_cluster_instead_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<gate_cluster_instead_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coord.gate_cluster_instead_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coord.gate_cluster_instead_request)
    MergeFrom(*source);
  }
}

void gate_cluster_instead_request::MergeFrom(const gate_cluster_instead_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coord.gate_cluster_instead_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void gate_cluster_instead_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coord.gate_cluster_instead_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gate_cluster_instead_request::CopyFrom(const gate_cluster_instead_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coord.gate_cluster_instead_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gate_cluster_instead_request::IsInitialized() const {
  return true;
}

void gate_cluster_instead_request::InternalSwap(gate_cluster_instead_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata gate_cluster_instead_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fcoord_2eproto_getter, &descriptor_table_proto_2fcoord_2eproto_once,
      file_level_metadata_proto_2fcoord_2eproto[3]);
}

// ===================================================================

class gate_cluster_instead_response::_Internal {
 public:
};

gate_cluster_instead_response::gate_cluster_instead_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:coord.gate_cluster_instead_response)
}
gate_cluster_instead_response::gate_cluster_instead_response(const gate_cluster_instead_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:coord.gate_cluster_instead_response)
}

void gate_cluster_instead_response::SharedCtor() {
userid_ = uint64_t{0u};
}

gate_cluster_instead_response::~gate_cluster_instead_response() {
  // @@protoc_insertion_point(destructor:coord.gate_cluster_instead_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void gate_cluster_instead_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void gate_cluster_instead_response::ArenaDtor(void* object) {
  gate_cluster_instead_response* _this = reinterpret_cast< gate_cluster_instead_response* >(object);
  (void)_this;
}
void gate_cluster_instead_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void gate_cluster_instead_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void gate_cluster_instead_response::Clear() {
// @@protoc_insertion_point(message_clear_start:coord.gate_cluster_instead_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* gate_cluster_instead_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 userId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* gate_cluster_instead_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coord.gate_cluster_instead_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 userId = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coord.gate_cluster_instead_response)
  return target;
}

size_t gate_cluster_instead_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coord.gate_cluster_instead_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 userId = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gate_cluster_instead_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coord.gate_cluster_instead_response)
  GOOGLE_DCHECK_NE(&from, this);
  const gate_cluster_instead_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<gate_cluster_instead_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coord.gate_cluster_instead_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coord.gate_cluster_instead_response)
    MergeFrom(*source);
  }
}

void gate_cluster_instead_response::MergeFrom(const gate_cluster_instead_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coord.gate_cluster_instead_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void gate_cluster_instead_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coord.gate_cluster_instead_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gate_cluster_instead_response::CopyFrom(const gate_cluster_instead_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coord.gate_cluster_instead_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gate_cluster_instead_response::IsInitialized() const {
  return true;
}

void gate_cluster_instead_response::InternalSwap(gate_cluster_instead_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata gate_cluster_instead_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fcoord_2eproto_getter, &descriptor_table_proto_2fcoord_2eproto_once,
      file_level_metadata_proto_2fcoord_2eproto[4]);
}

// ===================================================================

class gate_test_request::_Internal {
 public:
};

gate_test_request::gate_test_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:coord.gate_test_request)
}
gate_test_request::gate_test_request(const gate_test_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:coord.gate_test_request)
}

void gate_test_request::SharedCtor() {
}

gate_test_request::~gate_test_request() {
  // @@protoc_insertion_point(destructor:coord.gate_test_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void gate_test_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void gate_test_request::ArenaDtor(void* object) {
  gate_test_request* _this = reinterpret_cast< gate_test_request* >(object);
  (void)_this;
}
void gate_test_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void gate_test_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void gate_test_request::Clear() {
// @@protoc_insertion_point(message_clear_start:coord.gate_test_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* gate_test_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* gate_test_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coord.gate_test_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coord.gate_test_request)
  return target;
}

size_t gate_test_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coord.gate_test_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gate_test_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coord.gate_test_request)
  GOOGLE_DCHECK_NE(&from, this);
  const gate_test_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<gate_test_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coord.gate_test_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coord.gate_test_request)
    MergeFrom(*source);
  }
}

void gate_test_request::MergeFrom(const gate_test_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coord.gate_test_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void gate_test_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coord.gate_test_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gate_test_request::CopyFrom(const gate_test_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coord.gate_test_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gate_test_request::IsInitialized() const {
  return true;
}

void gate_test_request::InternalSwap(gate_test_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata gate_test_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fcoord_2eproto_getter, &descriptor_table_proto_2fcoord_2eproto_once,
      file_level_metadata_proto_2fcoord_2eproto[5]);
}

// ===================================================================

class gate_test_response::_Internal {
 public:
};

gate_test_response::gate_test_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:coord.gate_test_response)
}
gate_test_response::gate_test_response(const gate_test_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:coord.gate_test_response)
}

void gate_test_response::SharedCtor() {
}

gate_test_response::~gate_test_response() {
  // @@protoc_insertion_point(destructor:coord.gate_test_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void gate_test_response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void gate_test_response::ArenaDtor(void* object) {
  gate_test_response* _this = reinterpret_cast< gate_test_response* >(object);
  (void)_this;
}
void gate_test_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void gate_test_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void gate_test_response::Clear() {
// @@protoc_insertion_point(message_clear_start:coord.gate_test_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* gate_test_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* gate_test_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coord.gate_test_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coord.gate_test_response)
  return target;
}

size_t gate_test_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coord.gate_test_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gate_test_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coord.gate_test_response)
  GOOGLE_DCHECK_NE(&from, this);
  const gate_test_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<gate_test_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coord.gate_test_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coord.gate_test_response)
    MergeFrom(*source);
  }
}

void gate_test_response::MergeFrom(const gate_test_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coord.gate_test_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void gate_test_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coord.gate_test_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gate_test_response::CopyFrom(const gate_test_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coord.gate_test_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gate_test_response::IsInitialized() const {
  return true;
}

void gate_test_response::InternalSwap(gate_test_response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata gate_test_response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fcoord_2eproto_getter, &descriptor_table_proto_2fcoord_2eproto_once,
      file_level_metadata_proto_2fcoord_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace coord
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::coord::cluster_handshake_request* Arena::CreateMaybeMessage< ::coord::cluster_handshake_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::coord::cluster_handshake_request >(arena);
}
template<> PROTOBUF_NOINLINE ::coord::cluster_handshake_response* Arena::CreateMaybeMessage< ::coord::cluster_handshake_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::coord::cluster_handshake_response >(arena);
}
template<> PROTOBUF_NOINLINE ::coord::cluster_handshake_ack* Arena::CreateMaybeMessage< ::coord::cluster_handshake_ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::coord::cluster_handshake_ack >(arena);
}
template<> PROTOBUF_NOINLINE ::coord::gate_cluster_instead_request* Arena::CreateMaybeMessage< ::coord::gate_cluster_instead_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::coord::gate_cluster_instead_request >(arena);
}
template<> PROTOBUF_NOINLINE ::coord::gate_cluster_instead_response* Arena::CreateMaybeMessage< ::coord::gate_cluster_instead_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::coord::gate_cluster_instead_response >(arena);
}
template<> PROTOBUF_NOINLINE ::coord::gate_test_request* Arena::CreateMaybeMessage< ::coord::gate_test_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::coord::gate_test_request >(arena);
}
template<> PROTOBUF_NOINLINE ::coord::gate_test_response* Arena::CreateMaybeMessage< ::coord::gate_test_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::coord::gate_test_response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
