cmake_minimum_required (VERSION 3.5)
project (coord)

#项目选项
set (EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
set (LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

SET(CMAKE_CXX_COMPILER      "ccache")
SET(CMAKE_CXX_COMPILER_ARG1 "g++")

find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
endif(CCACHE_FOUND)

#编译选项
add_compile_options (-std=c++20 -Wall -O2 -fpermissive -g -Wno-deprecated-declarations -Wno-unused-variable) 

#头文件
include_directories (src)
include_directories (include)
include_directories (include/lua)
include_directories (include/tolua++)

#源文件
aux_source_directory (src/proto SRC_LIST)
aux_source_directory (src/coord/memory SRC_LIST)
aux_source_directory (src/coord/argument SRC_LIST)
aux_source_directory (src/coord/environment SRC_LIST)
aux_source_directory (src/coord/base SRC_LIST)
aux_source_directory (src/coord/run SRC_LIST)
aux_source_directory (src/coord/log SRC_LIST)
aux_source_directory (src/coord/log4cc SRC_LIST)
aux_source_directory (src/coord/event SRC_LIST)
aux_source_directory (src/coord/scene SRC_LIST)
aux_source_directory (src/coord/component SRC_LIST)
aux_source_directory (src/coord/script SRC_LIST)
aux_source_directory (src/coord/object SRC_LIST)
aux_source_directory (src/coord/config SRC_LIST)
aux_source_directory (src/coord/encrypt SRC_LIST)
aux_source_directory (src/coord/display SRC_LIST)
aux_source_directory (src/coord/net SRC_LIST)
aux_source_directory (src/coord/http SRC_LIST)
aux_source_directory (src/coord/web SRC_LIST)
aux_source_directory (src/coord/websocket SRC_LIST)
aux_source_directory (src/coord/gate SRC_LIST)
aux_source_directory (src/coord/protobuf SRC_LIST)
aux_source_directory (src/coord/timer SRC_LIST)
aux_source_directory (src/coord/sql SRC_LIST)
aux_source_directory (src/coord/sql/mysql SRC_LIST)
aux_source_directory (src/coord/redis SRC_LIST)
aux_source_directory (src/coord/cache SRC_LIST)
aux_source_directory (src/coord/cluster SRC_LIST)
aux_source_directory (src/coord/managed SRC_LIST)
aux_source_directory (src/coord/io SRC_LIST)
aux_source_directory (src/coord/worker SRC_LIST)
aux_source_directory (src/coord/action SRC_LIST)
aux_source_directory (src/coord/closure SRC_LIST)
aux_source_directory (src/coord/json SRC_LIST)
aux_source_directory (src/coord/login SRC_LIST)
aux_source_directory (src/coord/pipe SRC_LIST)
aux_source_directory (src/coord SRC_LIST)
aux_source_directory (src/json11 SRC_LIST)
aux_source_directory (src/script SRC_LIST)

aux_source_directory (src/coordx COORDX_SRC_LIST)
aux_source_directory (src/coordx/memory COORDX_SRC_LIST)
aux_source_directory (src/coordx/error COORDX_SRC_LIST)
aux_source_directory (src/coordx/log COORDX_SRC_LIST)
aux_source_directory (src/coordx/path COORDX_SRC_LIST)
aux_source_directory (src/coordx/reactor COORDX_SRC_LIST)
aux_source_directory (src/coordx/string COORDX_SRC_LIST)
aux_source_directory (src/coordx/date COORDX_SRC_LIST)

#库文件
find_library(LUA_LIB lua HINTS ${PROJECT_SOURCE_DIR}/lib/)
find_library(TOLUA_LIB tolua++ HINTS ${PROJECT_SOURCE_DIR}/lib/)
find_library(HTTP_PARSER_LIB http_parser HINTS ${PROJECT_SOURCE_DIR}/lib/)
find_library(PROTOBUF_LIB protobuf HINTS ${PROJECT_SOURCE_DIR}/lib/)
find_library(UV_LIB uv HINTS ${PROJECT_SOURCE_DIR}/lib/)
find_library(HIREDIS_LIB hiredis HINTS ${PROJECT_SOURCE_DIR}/lib/)
find_library(MYSQLCLIENT_LIB mysqlclient HINTS ${PROJECT_SOURCE_DIR}/lib/)
find_library(GTEST_LIB gtest HINTS ${PROJECT_SOURCE_DIR}/lib/)
find_library(GMOCK_LIB gmock HINTS ${PROJECT_SOURCE_DIR}/lib/)
find_library(BENCHMARK_LIB benchmark HINTS ${PROJECT_SOURCE_DIR}/lib/)
find_library(CCRONEXPR_LIB ccronexpr HINTS ${PROJECT_SOURCE_DIR}/lib/)
find_library(CJSON_LIB cjson HINTS ${PROJECT_SOURCE_DIR}/lib/)
find_library(R3_LIB r3 HINTS ${PROJECT_SOURCE_DIR}/lib/)

#libcoord
add_library (libcoord STATIC ${SRC_LIST})
set_target_properties (libcoord PROPERTIES OUTPUT_NAME "coord")
target_link_libraries (libcoord libcoordx)
target_link_libraries (libcoord ${LUA_LIB})
target_link_libraries (libcoord ${TOLUA_LIB})
target_link_libraries (libcoord ${HTTP_PARSER_LIB})
target_link_libraries (libcoord ${PROTOBUF_LIB})
target_link_libraries (libcoord ${UV_LIB})
target_link_libraries (libcoord ${HIREDIS_LIB})
#target_link_libraries (libcoord ${MYSQLCLIENT_LIB})
target_link_libraries (libcoord ${CCRONEXPR_LIB})
target_link_libraries (libcoord ${CJSON_LIB})
target_link_libraries (libcoord ${R3_LIB})

#coord
add_executable (coord src/coord.cc)
target_link_libraries (coord libcoordx)
target_link_libraries (coord libcoord)
target_link_libraries (coord ${LUA_LIB})
target_link_libraries (coord ${TOLUA_LIB})
target_link_libraries (coord ${HTTP_PARSER_LIB})
target_link_libraries (coord ${PROTOBUF_LIB})
target_link_libraries (coord ${UV_LIB})
target_link_libraries (coord ${HIREDIS_LIB})
#target_link_libraries (coord ${MYSQLCLIENT_LIB})
target_link_libraries (coord ${CCRONEXPR_LIB})
target_link_libraries (coord ${CJSON_LIB})
target_link_libraries (coord ${R3_LIB})
target_link_libraries (coord ssl)
target_link_libraries (coord crypto)
target_link_libraries (coord dl)
target_link_libraries (coord m)
target_link_libraries (coord ncurses)
target_link_libraries (coord readline)
target_link_libraries (coord pthread)
target_link_libraries (coord mysqlclient)
target_link_libraries (coord pcre)

#libcoordx
add_library (libcoordx STATIC ${COORDX_SRC_LIST})
set_target_properties (libcoordx PROPERTIES OUTPUT_NAME "coordx")
target_link_libraries (libcoordx ${LUA_LIB})
target_link_libraries (libcoordx ${TOLUA_LIB})
target_link_libraries (libcoordx ${HTTP_PARSER_LIB})
target_link_libraries (libcoordx ${PROTOBUF_LIB})
target_link_libraries (libcoordx ${UV_LIB})
target_link_libraries (libcoordx ${HIREDIS_LIB})
target_link_libraries (libcoordx ${MYSQLCLIENT_LIB})
target_link_libraries (libcoordx ${CCRONEXPR_LIB})
target_link_libraries (libcoordx ${CJSON_LIB})
target_link_libraries (libcoordx ${R3_LIB})

#test
add_executable (test src/test.cc)
target_link_libraries (test libcoordx)
target_link_libraries (test libcoord)
target_link_libraries (test ${LUA_LIB})
target_link_libraries (test ${TOLUA_LIB})
target_link_libraries (test ${HTTP_PARSER_LIB})
target_link_libraries (test ${PROTOBUF_LIB})
target_link_libraries (test ${UV_LIB})
target_link_libraries (test ${HIREDIS_LIB})
#target_link_libraries (test ${MYSQLCLIENT_LIB})
target_link_libraries (test ${CCRONEXPR_LIB})
target_link_libraries (test ${CJSON_LIB})
target_link_libraries (test ${R3_LIB})
target_link_libraries (test ${GTEST_LIB})
target_link_libraries (test ${GMOCK_LIB})
target_link_libraries (test ssl)
target_link_libraries (test crypto)
target_link_libraries (test dl)
target_link_libraries (test m)
target_link_libraries (test ncurses)
target_link_libraries (test readline)
target_link_libraries (test pthread)
target_link_libraries (test mysqlclient)
target_link_libraries (test pcre)

#benchmark
add_executable (benchmark src/benchmark.cc)
target_link_libraries (benchmark libcoordx)
target_link_libraries (benchmark libcoord)
target_link_libraries (benchmark ${LUA_LIB})
target_link_libraries (benchmark ${TOLUA_LIB})
target_link_libraries (benchmark ${HTTP_PARSER_LIB})
target_link_libraries (benchmark ${PROTOBUF_LIB})
target_link_libraries (benchmark ${UV_LIB})
target_link_libraries (benchmark ${HIREDIS_LIB})
#target_link_libraries (benchmark ${MYSQLCLIENT_LIB})
target_link_libraries (benchmark ${CCRONEXPR_LIB})
target_link_libraries (benchmark ${CJSON_LIB})
target_link_libraries (benchmark ${R3_LIB})
target_link_libraries (benchmark ${GTEST_LIB})
target_link_libraries (benchmark ${GMOCK_LIB})
target_link_libraries (benchmark ${BENCHMARK_LIB})
target_link_libraries (benchmark ssl)
target_link_libraries (benchmark crypto)
target_link_libraries (benchmark dl)
target_link_libraries (benchmark m)
target_link_libraries (benchmark ncurses)
target_link_libraries (benchmark readline)
target_link_libraries (benchmark pthread)
target_link_libraries (benchmark mysqlclient)
target_link_libraries (benchmark pcre)

add_custom_target(tolua
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/src
    COMMAND ${PROJECT_SOURCE_DIR}/bin/tolua++/tolua++ -n coord -o script/interface.cc ../script/interface.pkg
)

add_custom_target(protoc
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
    COMMAND ${PROJECT_SOURCE_DIR}/bin/protoc --cpp_out=src proto/*.proto
)

add_custom_target(runtest
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
    COMMAND ${PROJECT_SOURCE_DIR}/bin/test
)

#add_dependencies (coord tolua)
#add_dependencies (libcoord tolua)
#add_dependencies (test tolua)
